#define UNICODE
#include <nan.h>
#include <vector>
#include <string>
using std::vector;
using std::wstring;

vector<v8::Local<v8::String> > monitorList;

BOOL CALLBACK MyInfoEnumProc(
	HMONITOR hMonitor,
	HDC hdcMonitor,
	LPRECT lprcMonitor,
	LPARAM dwData
	)
{
	MONITORINFOEX mi;
	ZeroMemory(&mi, sizeof(mi));
	mi.cbSize = sizeof(mi);
	GetMonitorInfo(hMonitor, &mi);
	monitorList.push_back(Nan::New((const uint16_t*)mi.szDevice).ToLocalChecked());
	return TRUE;
}

void getMonitor(const Nan::FunctionCallbackInfo<v8::Value>& info) {
	monitorList.clear();
    EnumDisplayMonitors(NULL, NULL, MyInfoEnumProc, 0);

	v8::Local<v8::Array> arr = Nan::New<v8::Array>();
	for (int i = 0; i < monitorList.size(); ++i) {
		arr->Set(i, monitorList[i]);
	}
	info.GetReturnValue().Set(arr);
}

void getDisplayDevice(const Nan::FunctionCallbackInfo<v8::Value>& info) {
    v8::Local<v8::Array> arr = Nan::New<v8::Array>();
    
    DISPLAY_DEVICE dd;
    ZeroMemory(&dd, sizeof(dd));
    dd.cb = sizeof(dd);
    for (int i = 0; EnumDisplayDevices(NULL, i, &dd, 0); i++)
    {
		v8::Local<v8::Object> obj = Nan::New<v8::Object>();

		obj->Set(Nan::New("DeviceName").ToLocalChecked(), Nan::New<v8::String>((const uint16_t*)dd.DeviceName).ToLocalChecked());
		obj->Set(Nan::New("DeviceString").ToLocalChecked(), Nan::New<v8::String>((const uint16_t*)dd.DeviceString).ToLocalChecked());
		obj->Set(Nan::New("StateFlags").ToLocalChecked(), Nan::New<v8::Number>(dd.StateFlags));
        
        // Get more info about the device  
        DISPLAY_DEVICE dd2;
        ZeroMemory(&dd2, sizeof(dd2));
        dd2.cb = sizeof(dd2);
        EnumDisplayDevices(dd.DeviceName, 0, &dd2, 0);
        
        obj->Set(Nan::New("DeviceID").ToLocalChecked(), Nan::New<v8::String>((const uint16_t*)dd2.DeviceID).ToLocalChecked());
        obj->Set(Nan::New("MonitorName").ToLocalChecked(), Nan::New<v8::String>((const uint16_t*)dd2.DeviceString).ToLocalChecked());

		arr->Set(i, obj);
    }
    info.GetReturnValue().Set(arr);
}

//#define DISPLAY_DEVICE_ATTACHED_TO_DESKTOP 0x00000001
//#define DISPLAY_DEVICE_MULTI_DRIVER        0x00000002
//#define DISPLAY_DEVICE_PRIMARY_DEVICE      0x00000004
//#define DISPLAY_DEVICE_MIRRORING_DRIVER    0x00000008
//#define DISPLAY_DEVICE_VGA_COMPATIBLE      0x00000010
//#define DISPLAY_DEVICE_REMOVABLE           0x00000020
//#define DISPLAY_DEVICE_MODESPRUNED         0x08000000
//#define DISPLAY_DEVICE_REMOTE              0x04000000
//#define DISPLAY_DEVICE_DISCONNECT          0x02000000
//#define DISPLAY_DEVICE_TS_COMPATIBLE       0x00200000


void Init(v8::Local<v8::Object> exports) {
    exports->Set(Nan::New("getDisplayDevice").ToLocalChecked(),
               Nan::New<v8::FunctionTemplate>(getDisplayDevice)->GetFunction());
    exports->Set(Nan::New("getMonitor").ToLocalChecked(),
               Nan::New<v8::FunctionTemplate>(getMonitor)->GetFunction());
	exports->Set(Nan::New("DISPLAY_DEVICE_ATTACHED_TO_DESKTOP").ToLocalChecked(),
		Nan::New<v8::Uint32>(0x00000001));
	exports->Set(Nan::New("DISPLAY_DEVICE_PRIMARY_DEVICE").ToLocalChecked(),
		Nan::New<v8::Uint32>(0x00000004));
	exports->Set(Nan::New("DISPLAY_DEVICE_MIRRORING_DRIVER").ToLocalChecked(),
		Nan::New<v8::Uint32>(0x00000008));
}

NODE_MODULE(addon, Init)


    